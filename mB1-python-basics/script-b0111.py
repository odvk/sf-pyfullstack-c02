# B1.11 Словари

my_dict = {"food": "Spam",
           "quantity": 5,
           "color": "invisible color"}

print(my_dict["food"])
print("---------")

# Значение, доступное по ключу, можно изменять.
my_dict["quantity"] = my_dict["quantity"] + 1
print(my_dict["quantity"])
print("---------")

# Чтобы завести новую пару ключ—значение, используется та же нотация квадратных скобок:
my_dict["owner"] = "Knight"
print(my_dict)
print("---------")

# Чтобы создать пустой словарь, используют пустые фигурные скобки:
my_new_dict = {}

# Давайте наполним этот словарь ключами из чисел и присвоим каждому ключу значение в виде его строкового представления.
for number in range(5):
    my_new_dict[number] = str(number)
print(my_new_dict)
print(my_new_dict.keys())
print("---------")
#input("Введите любой символ: ")

# Чтобы посмотреть, какие ключи есть в словаре, используют метод .keys():
print(my_dict.keys())
print("---------")
#input("Введите любой символ: ")

# Мы видим, что нам вернулся список ключей, обёрнутый в dict_keys(). На самом деле это другой тип данных,
# похожий на список, но не являющийся им в строгом смысле.
# Мы можем проитерироваться по нему (перебрать все его значения в цикле for):
for key in my_dict.keys():
    print(key)

# Но, например, мы не сможем обратиться к ключу по индексу:
# my_dict.keys()[0]
# TypeError: 'dict_keys' object does not support indexing

# Если обратиться к несуществующему ключу, будет ошибка:
# my_dict["foo"]
# KeyError: 'foo'

# Можно проверять наличие ключа в словаре с помощью ключевого слова in:
if "foo" not in my_dict:
    my_dict["foo"] = "bar"
print(my_dict)

# Чтобы избежать падения скрипта при обращении к несуществующему ключу, можно также использовать метод .get():
my_dict.get("bazz")

# Метод .items() возвращает список пар ключ—значение (это, опять же, не совсем список)
print("Метод .items()")
print(my_dict.items())
print()

# Такой синтаксис называется распаковкой.
# он позволяет на ходу "распаковать" список из нескольких объектов сразу в переменные.
for key, value in my_dict.items():
    print(key, "is", value)