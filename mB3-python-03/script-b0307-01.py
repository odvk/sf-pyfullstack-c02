# В3.7 Ещё раз про “магические” методы

class User:
    def __init__(self):
        print("Конструирую пользователя")
        self.name = "Гелиозавр"


# конструктор это функция определяемая внутри класса;
# конструктор называется __init__ (два подчёркивания с двух сторон от названия);
# конструктор это функция: есть формальный аргумент, который называется 'self';
# внутри конструктора фактический аргумент self можно использовать чтобы изменять поля манипулируемого объекта.


u1 = User()
u2 = User()

u2.name = "Орнитишийлар"
print(u1.name, u2.name)

print("----------------------------")


# В нашем случае мы хотим сделать так, чтобы когда User участвует в выражении как строка
# (то есть приводится к строке) использовалось поле name. Это делается таким кодом:

class User1:
    def __init__(self):
        print("Конструирую пользователя")
        self.name = "Гелиозавр"

    def __str__(self):
        return self.name


u1 = User1()
print(u1)

print("----------------------------")


# Дополним нашу модель пользователя и перепишем немного определение класса:

class User2:
    def __init__(self, email, name="Гелиозавр"):
        self.email = email
        self.name = name

    def __str__(self):
        return "%s <%s>" % (self.name, self.email)


u1 = User2("test@example.com")
u2 = User2(name="Орнитишийлар", email="zakusi@pet.ru")

print(u1, u2)

print("----------------------------")


# Обратите внимание, что некоторые примеров в таблице выше используют два аргумента,
# так как они описывают какое-то парное действие. К примеру, мы в нашем сервисе можем считать,
# что если у нас есть два пользователя с одинаковым е-мейлом, то это два равных пользователя.
# Чтобы использовать эту проверку в коде мы определим наш класс пользователя так:

class User3:
    def __init__(self, email, name="Гелиозавр"):
        self.email = email
        self.name = name

    def __str__(self):
        return "%s <%s>" % (self.name, self.email)

    def __eq__(self, other):
        return self.email.lower() == other.email.lower()

u1 = User3(name="Гелиозавр", email="RAWR@mail.ru")
u2 = User3(name="Орнитишийлар", email="rawr@mail.ru")
print(u1, u2)

print("Это один и тот же пользователь?", u1 == u2)

