# В3.10 Ещё немного про сравнение и “пустые” объекты

# Часто в разработке возникает необходимость выполнять одно из двух действий:
# - Сравнивать один объект с другим
# - Проверять, что объект действительно имеет какое-то значение


"""
Для сравнения одного объекта с другим мы уже умеем использовать операцию сравнения ==,
но на самом деле то что она делает чаще всего это сравнивает два объекта по значению
(или так как ей диктует специальный метод __eq__). Для большинства задач это именно то что требуется,
но иногда надо поставить вопрос точнее: "является ли одна переменная тем же объектом что и другая".
Такое сравнение осуществляется оператором is
Для большинство реальных задач это чаще всего сводится для одного конкретного случая: сравнения с пустым объектом.
"""

a = 15.0
b = 15
print('id(a)', id(a))
print('id(b)', id(b))
print('a == b', a == b)
print('a is b', a is b)
print('a is not b', a is not b)

# Операция проверки идентичности is
# Операция проверки идентичности is преимущественно используется для булевых операций и проверок,
# не является ли объект "пустышкой". "Пустышкой" в данном случае является специальный объект None,
# который гарантированно один на время существования программы и его часто используют,
# например для необязательных аргументов функции без значений по умолчанию:

print('--------------------------')


def func(a, b=None):
    if b is None:
        return a * 2
    else:
        return a + b


print(func(3))
print(func(3, 4))
print('--------------------------')


# Также None возвращается неявно из функций (и методов) которые ничего не возвращают.
# Это важный момент, потому что при разработке скриптов часто легко перепутать вывод через print с полноценным return:

def func(a, b):
    print(a + b)


result = func(2, 17)
print(result)
print(type(result))
print(result is None)

print(' Задание 1--------------------------')
print(bool('' is None))

print(' Задание 2--------------------------')
test_cases = (
    42,
    '',
    [1, 2],
    [],
    {},
    None,
    0
)

result = []
for entry in test_cases:
    if entry:
        result.append(1)
    if entry is None:
        result.append(0)

print(result)


print('Задание 3 -----------------------------------------')
# У функций бывает два типа аргументов: позиционные и именованные.
# С помощью None можно создать возможность “запретить” позиционные аргументы.
# Обычно вызов таких функций приводит к ошибке, но мы хотим просто показывать предупреждение
# (с помощью print) и None вместо результата, то есть при вызове функции my_func,
# которая имеет такую “защиту” получать такой результат:


def my_func(sentinel=None, param=14):
    if sentinel is not None:
        print("Так не работает. Указывайте только именованные аргументы")
        return
    return print("пароли от всех секретов")

my_func()
my_func(20)
my_func(param=20)
